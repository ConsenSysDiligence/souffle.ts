/// ArrayTypeName
===============
id
/// ArrayTypeName_baseType
===============
id val
/// ArrayTypeName_length
===============
id val present
/// ArrayTypeName_typeString
===============
id val
/// Assignment
===============
id
19
25
/// Assignment_leftHandSide
===============
id val
19    17
25    21
/// Assignment_operator
===============
id val
19    +=
25    =
/// Assignment_rightHandSide
===============
id val
19    18
25    24
/// Assignment_typeString
===============
id val
19    uint256
25    uint256
/// BinaryOperation
===============
id
16
24
/// BinaryOperation_leftExpression
===============
id val
16    14
24    22
/// BinaryOperation_operator
===============
id val
16    <
24    +
/// BinaryOperation_rightExpression
===============
id val
16    15
24    23
/// BinaryOperation_typeString
===============
id val
16    bool
24    uint256
/// BinaryOperation_userFunction
===============
id val present
16    -1    0
24    -1    0
/// Block
===============
id
27
31
/// Block_statements
===============
parentId childId idx
27    20    0
27    26    1
31    9    0
31    13    1
31    28    2
31    30    3
/// Break
===============
id
/// CompilerVersion
===============
major minor patch
0    8    17
/// Conditional
===============
id
/// Conditional_condition
===============
id val
/// Conditional_falseExpression
===============
id val
/// Conditional_trueExpression
===============
id val
/// Conditional_typeString
===============
id val
/// ConstantExpression
===============
id
8
12
15
23
/// Continue
===============
id
/// ContractDefinition
===============
id
33
/// ContractDefinition_abstract
===============
id val
33    0
/// ContractDefinition_fullyImplemented
===============
id val
33    1
/// ContractDefinition_kind
===============
id val
33    contract
/// ContractDefinition_linearizedBaseContracts
===============
parentId childId idx
33    33    0
/// ContractDefinition_name
===============
id val
33    Foo
/// ContractDefinition_scope
===============
id val
33    34
/// ContractDefinition_usedErrors
===============
parentId childId idx
/// ContractDefinition_usedEvents
===============
parentId childId idx
/// DoWhileStatement
===============
id
/// DoWhileStatement_body
===============
id val
/// DoWhileStatement_condition
===============
id val
/// ElementaryTypeName
===============
id
3
6
10
/// ElementaryTypeNameExpression
===============
id
/// ElementaryTypeNameExpression_typeName
===============
id val
/// ElementaryTypeNameExpression_typeString
===============
id val
/// ElementaryTypeName_name
===============
id val
3    uint
6    uint
10    uint
/// ElementaryTypeName_stateMutability
===============
id val
3    nonpayable
6    nonpayable
10    nonpayable
/// ElementaryTypeName_typeString
===============
id val
3    uint256
6    uint256
10    uint256
/// EmitStatement
===============
id
/// EmitStatement_eventCall
===============
id val
/// EnumDefinition
===============
id
/// EnumDefinition_members
===============
parentId childId idx
/// EnumDefinition_name
===============
id val
/// EnumValue
===============
id
/// EnumValue_name
===============
id val
/// ErrorDefinition
===============
id
/// ErrorDefinition_name
===============
id val
/// ErrorDefinition_parameters
===============
id val
/// EventDefinition
===============
id
/// EventDefinition_anonymous
===============
id val
/// EventDefinition_name
===============
id val
/// EventDefinition_parameters
===============
id val
/// Expression
===============
id
8
12
14
15
16
17
18
19
21
22
23
24
25
29
/// ExpressionStatement
===============
id
20
26
/// ExpressionStatement_expression
===============
id val
20    19
26    25
/// ExternalCall
===============
id
/// ForStatement
===============
id
/// ForStatement_body
===============
id val
/// ForStatement_condition
===============
id val present
/// ForStatement_initializationExpression
===============
id val present
/// ForStatement_loopExpression
===============
id val present
/// FunctionCall
===============
id
/// FunctionCallOptions
===============
id
/// FunctionCallOptions_expression
===============
id val
/// FunctionCallOptions_options
===============
parentId name id
/// FunctionCallOptions_typeString
===============
id val
/// FunctionCall_arguments
===============
parentId childId idx
/// FunctionCall_expression
===============
id val
/// FunctionCall_fieldNames
===============
parentId name idx
/// FunctionCall_kind
===============
id val
/// FunctionCall_typeString
===============
id val
/// FunctionDefinition
===============
id
32
/// FunctionDefinition_body
===============
id val present
32    31    1
/// FunctionDefinition_isConstructor
===============
id val
32    0
/// FunctionDefinition_kind
===============
id val
32    function
/// FunctionDefinition_modifiers
===============
parentId childId idx
/// FunctionDefinition_name
===============
id val
32    main
/// FunctionDefinition_overrideSpecifier
===============
id val present
32    -1    0
/// FunctionDefinition_parameters
===============
id val
32    2
/// FunctionDefinition_returnParameters
===============
id val
32    5
/// FunctionDefinition_scope
===============
id val
32    33
/// FunctionDefinition_stateMutability
===============
id val
32    nonpayable
/// FunctionDefinition_virtual
===============
id val
32    0
/// FunctionDefinition_visibility
===============
id val
32    public
/// FunctionTypeName
===============
id
/// FunctionTypeName_parameterTypes
===============
id val
/// FunctionTypeName_returnParameterTypes
===============
id val
/// FunctionTypeName_stateMutability
===============
id val
/// FunctionTypeName_typeString
===============
id val
/// FunctionTypeName_visibility
===============
id val
/// Identifier
===============
id
14
17
18
21
22
29
/// IdentifierPath
===============
id
/// IdentifierPath_name
===============
id val
/// IdentifierPath_referencedDeclaration
===============
id val
/// Identifier_name
===============
id val
14    x
18    x
21    x
22    x
17    sum
29    sum
/// Identifier_referencedDeclaration
===============
id val
14    7
17    11
18    7
21    7
22    7
29    11
/// Identifier_typeString
===============
id val
14    uint256
17    uint256
18    uint256
21    uint256
22    uint256
29    uint256
/// IfStatement
===============
id
/// IfStatement_condition
===============
id val
/// IfStatement_falseBody
===============
id val present
/// IfStatement_trueBody
===============
id val
/// ImportDirective
===============
id
/// ImportDirective_absolutePath
===============
id val
/// ImportDirective_file
===============
id val
/// ImportDirective_scope
===============
id val
/// ImportDirective_sourceUnit
===============
id val
/// ImportDirective_unitAlias
===============
id val
/// IndexAccess
===============
id
/// IndexAccess_baseExpression
===============
id val
/// IndexAccess_indexExpression
===============
id val present
/// IndexAccess_typeString
===============
id val
/// IndexRangeAccess
===============
id
/// IndexRangeAccess_baseExpression
===============
id val
/// IndexRangeAccess_endExpression
===============
id val present
/// IndexRangeAccess_startExpression
===============
id val present
/// IndexRangeAccess_typeString
===============
id val
/// InheritanceSpecifier
===============
id
/// InheritanceSpecifier_arguments
===============
parentId childId idx
/// InheritanceSpecifier_baseType
===============
id val
/// InlineAssembly
===============
id
/// Literal
===============
id
8
12
15
23
/// Literal_hexValue
===============
id val
8    31
12    30
15    3130
23    31
/// Literal_kind
===============
id val
8    number
12    number
15    number
23    number
/// Literal_subdenomination
===============
id val present
8        0
12        0
15        0
23        0
/// Literal_typeString
===============
id val
8    int_const 1
12    int_const 0
15    int_const 10
23    int_const 1
/// Literal_value
===============
id val
8    1
12    0
15    10
23    1
/// Mapping
===============
id
/// Mapping_keyType
===============
id val
/// Mapping_typeString
===============
id val
/// Mapping_valueType
===============
id val
/// MemberAccess
===============
id
/// MemberAccess_expression
===============
id val
/// MemberAccess_memberName
===============
id val
/// MemberAccess_referencedDeclaration
===============
id val
/// MemberAccess_typeString
===============
id val
/// ModifierDefinition
===============
id
/// ModifierDefinition_body
===============
id val present
/// ModifierDefinition_name
===============
id val
/// ModifierDefinition_overrideSpecifier
===============
id val present
/// ModifierDefinition_parameters
===============
id val
/// ModifierDefinition_virtual
===============
id val
/// ModifierDefinition_visibility
===============
id val
/// ModifierInvocation
===============
id
/// ModifierInvocation_arguments
===============
parentId childId idx
/// ModifierInvocation_kind
===============
id val present
/// ModifierInvocation_modifierName
===============
id val
/// ModifierInvocation_vReferencedDeclaration
===============
mId rId
/// NewExpression
===============
id
/// NewExpression_typeName
===============
id val
/// NewExpression_typeString
===============
id val
/// Node
===============
id
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
/// OverrideSpecifier
===============
id
/// OverrideSpecifier_overrides
===============
parentId childId idx
/// ParameterList
===============
id
2
5
/// ParameterList_parameters
===============
parentId childId idx
5    4    0
/// PlaceholderStatement
===============
id
/// PragmaDirective
===============
id
1
/// PragmaDirective_literals
===============
parentId literal idx
1    solidity    0
1    0.8    1
1    .17    2
/// PrimaryExpression
===============
id
/// Return
===============
id
30
/// Return_expression
===============
id val present
30    29    1
/// Return_functionReturnParameters
===============
id val
30    5
/// RevertStatement
===============
id
/// RevertStatement_errorCall
===============
id val
/// SourceUnit
===============
id
34
/// SourceUnit_absolutePath
===============
id val
34    test/samples/analyses/cfg/while.sol
/// SourceUnit_exportedSymbols
===============
parentId name id
34    Foo    33
/// SourceUnit_license
===============
id val present
34        0
/// SourceUnit_sourceEntryKey
===============
id val
34    test/samples/analyses/cfg/while.sol
/// SourceUnit_sourceListIndex
===============
id val
34    0
/// Statement
===============
id
9
13
20
26
27
28
30
31
/// StatementWithChildren
===============
id
/// StructDefinition
===============
id
/// StructDefinition_members
===============
parentId childId idx
/// StructDefinition_name
===============
id val
/// StructDefinition_scope
===============
id val
/// StructDefinition_visibility
===============
id val
/// StructuredDocumentation
===============
id
/// StructuredDocumentation_text
===============
id val
/// Throw
===============
id
/// TryCatchClause
===============
id
/// TryCatchClause_block
===============
id val
/// TryCatchClause_errorName
===============
id val
/// TryCatchClause_parameters
===============
id val present
/// TryStatement
===============
id
/// TryStatement_clauses
===============
parentId childId idx
/// TryStatement_externalCall
===============
id val
/// TupleExpression
===============
id
/// TupleExpression_components
===============
parentId childId idx realIdx
/// TupleExpression_isInlineArray
===============
id val
/// TupleExpression_typeString
===============
id val
/// TypeName
===============
id
3
6
10
/// UnaryOperation
===============
id
/// UnaryOperation_operator
===============
id val
/// UnaryOperation_prefix
===============
id val
/// UnaryOperation_subExpression
===============
id val
/// UnaryOperation_typeString
===============
id val
/// UnaryOperation_userFunction
===============
id val present
/// UncheckedBlock
===============
id
/// UncheckedBlock_statements
===============
parentId childId idx
/// UserDefinedTypeName
===============
id
/// UserDefinedTypeName_name
===============
id val present
/// UserDefinedTypeName_path
===============
id val present
/// UserDefinedTypeName_referencedDeclaration
===============
id val
/// UserDefinedTypeName_typeString
===============
id val
/// UserDefinedValueTypeDefinition
===============
id
/// UserDefinedValueTypeDefinition_name
===============
id val
/// UserDefinedValueTypeDefinition_underlyingType
===============
id val
/// UsingForDirective
===============
id
/// UsingForDirective_functionList
===============
parentId childId operator idx
/// UsingForDirective_isGlobal
===============
id val
/// UsingForDirective_libraryName
===============
id val present
/// UsingForDirective_typeName
===============
id val present
/// VariableDeclaration
===============
id
4
7
11
/// VariableDeclarationStatement
===============
id
9
13
/// VariableDeclarationStatement_assignments
===============
parentId childId idx realIdx
9    7    0    0
13    11    0    0
/// VariableDeclarationStatement_declarations
===============
parentId childId idx
9    7    0
13    11    0
/// VariableDeclarationStatement_initialValue
===============
id val present
9    8    1
13    12    1
/// VariableDeclaration_constant
===============
id val
4    0
7    0
11    0
/// VariableDeclaration_indexed
===============
id val
4    0
7    0
11    0
/// VariableDeclaration_mutability
===============
id val
4    mutable
7    mutable
11    mutable
/// VariableDeclaration_name
===============
id val
4    
7    x
11    sum
/// VariableDeclaration_overrideSpecifier
===============
id val present
4    -1    0
7    -1    0
11    -1    0
/// VariableDeclaration_scope
===============
id val
4    32
7    31
11    31
/// VariableDeclaration_stateVariable
===============
id val
4    0
7    0
11    0
/// VariableDeclaration_storageLocation
===============
id val
4    default
7    default
11    default
/// VariableDeclaration_typeName
===============
id val present
4    3    1
7    6    1
11    10    1
/// VariableDeclaration_typeString
===============
id val
4    uint256
7    uint256
11    uint256
/// VariableDeclaration_value
===============
id val present
4    -1    0
7    -1    0
11    -1    0
/// VariableDeclaration_visibility
===============
id val
4    internal
7    internal
11    internal
/// WhileStatement
===============
id
28
/// WhileStatement_body
===============
id val
28    27
/// WhileStatement_condition
===============
id val
28    16
/// ancestor
===============
ancestorId descendantId
34    1
32    2
33    2
34    2
4    3
5    3
32    3
33    3
34    3
5    4
32    4
33    4
34    4
32    5
33    5
34    5
7    6
9    6
31    6
32    6
33    6
34    6
9    7
31    7
32    7
33    7
34    7
9    8
31    8
32    8
33    8
34    8
31    9
32    9
33    9
34    9
11    10
13    10
31    10
32    10
33    10
34    10
13    11
31    11
32    11
33    11
34    11
13    12
31    12
32    12
33    12
34    12
31    13
32    13
33    13
34    13
16    14
28    14
31    14
32    14
33    14
34    14
16    15
28    15
31    15
32    15
33    15
34    15
28    16
31    16
32    16
33    16
34    16
19    17
20    17
27    17
28    17
31    17
32    17
33    17
34    17
19    18
20    18
27    18
28    18
31    18
32    18
33    18
34    18
20    19
27    19
28    19
31    19
32    19
33    19
34    19
27    20
28    20
31    20
32    20
33    20
34    20
25    21
26    21
27    21
28    21
31    21
32    21
33    21
34    21
24    22
25    22
26    22
27    22
28    22
31    22
32    22
33    22
34    22
24    23
25    23
26    23
27    23
28    23
31    23
32    23
33    23
34    23
25    24
26    24
27    24
28    24
31    24
32    24
33    24
34    24
26    25
27    25
28    25
31    25
32    25
33    25
34    25
27    26
28    26
31    26
32    26
33    26
34    26
28    27
31    27
32    27
33    27
34    27
31    28
32    28
33    28
34    28
30    29
31    29
32    29
33    29
34    29
31    30
32    30
33    30
34    30
32    31
33    31
34    31
33    32
34    32
34    33
/// callsDirectly
===============
caller callee
/// callsPath
===============
caller callee path
/// contract
===============
id name
33    Foo
/// dominate
===============
pred succ
8    9
8    12
8    13
8    14
8    15
8    16
8    17
8    18
8    19
8    20
8    21
8    22
8    23
8    24
8    25
8    26
8    27
8    28
8    29
8    30
8    31
9    12
9    13
9    14
9    15
9    16
9    17
9    18
9    19
9    20
9    21
9    22
9    23
9    24
9    25
9    26
9    27
9    28
9    29
9    30
9    31
12    13
12    14
12    15
12    16
12    17
12    18
12    19
12    20
12    21
12    22
12    23
12    24
12    25
12    26
12    27
12    28
12    29
12    30
12    31
13    14
13    15
13    16
13    17
13    18
13    19
13    20
13    21
13    22
13    23
13    24
13    25
13    26
13    27
13    28
13    29
13    30
13    31
14    15
14    16
14    28
14    29
14    30
14    31
15    16
15    28
15    29
15    30
15    31
16    28
16    29
16    30
16    31
17    19
17    20
17    21
17    22
17    23
17    24
17    25
17    26
17    27
17    28
17    29
17    30
17    31
18    17
18    19
18    20
18    21
18    22
18    23
18    24
18    25
18    26
18    27
18    28
18    29
18    30
18    31
19    20
19    21
19    22
19    23
19    24
19    25
19    26
19    27
19    28
19    29
19    30
19    31
20    21
20    22
20    23
20    24
20    25
20    26
20    27
20    28
20    29
20    30
20    31
21    25
21    26
21    27
21    28
21    29
21    30
21    31
22    21
22    23
22    24
22    25
22    26
22    27
22    28
22    29
22    30
22    31
23    21
23    24
23    25
23    26
23    27
23    28
23    29
23    30
23    31
24    21
24    25
24    26
24    27
24    28
24    29
24    30
24    31
25    26
25    27
25    28
25    29
25    30
25    31
28    29
28    30
28    31
29    30
29    31
/// dominateStmt
===============
pred succ
9    13
9    20
9    26
9    27
9    28
9    30
13    20
13    26
13    27
13    28
13    30
20    26
28    30
/// exprRefersTo
===============
exprId defId
14    7
17    11
18    7
21    7
22    7
29    11
/// funHasMsgSenderBuiltin
===============
funId eId
/// funHasMsgSenderCall
===============
funId eId
/// function
===============
id name
32    main
/// functionIn
===============
id name contractId
32    main    33
/// inherits
===============
childContractId baseContractId
33    33
/// method
===============
methodId contractId
32    33
/// modifierInvocation_isModifier
===============
mid
/// parent
===============
parentId childId
4    3
5    4
7    6
9    7
9    8
11    10
13    11
13    12
16    14
16    15
19    17
19    18
20    19
24    22
24    23
25    21
25    24
26    25
27    20
27    26
28    16
28    27
30    29
31    9
31    13
31    28
31    30
32    2
32    5
32    31
33    32
34    1
34    33
/// src
===============
id src
1    0:23:0
2    54:2:0
3    73:4:0
4    73:4:0
5    72:6:0
6    83:4:0
7    83:6:0
8    92:1:0
9    83:10:0
10    97:4:0
11    97:8:0
12    108:1:0
13    97:12:0
14    121:1:0
15    125:2:0
16    121:6:0
17    134:3:0
18    141:1:0
19    134:8:0
20    134:8:0
21    147:1:0
22    151:1:0
23    155:1:0
24    151:5:0
25    147:9:0
26    147:9:0
27    129:32:0
28    114:47:0
29    172:3:0
30    165:10:0
31    79:100:0
32    41:138:0
33    25:156:0
34    0:182:0
/// stateVar
===============
id name
/// stateVarAssignedIn
===============
varContractName stateVarName funContractName funName
/// stateVarModifiedInLHS
===============
varId exprId
7    14
11    17
7    18
7    21
7    22
11    29
/// varModifiedInLHSOfAssignment
===============
varId assignmentId
7    25
11    19